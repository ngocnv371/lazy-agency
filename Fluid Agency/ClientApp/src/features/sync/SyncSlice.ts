import {
  createAsyncThunk,
  createSlice,
  PayloadAction,
  SerializedError,
} from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";
import { WorkOrder } from "../../models/WorkOrder";
import { fetchModifiedWorkOrders } from "./SyncAPI";

export interface SyncState {
  items: WorkOrder[];
  status: "idle" | "loading" | "failed";
  error: SerializedError | null;
  logs: string[];
}

const initialState: SyncState = {
  items: [],
  status: "idle",
  error: null,
  logs: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const syncWorkOrdersAsync = createAsyncThunk(
  "sync/syncWorkOrdersAsync",
  async (_, api) => {
    console.info(`[syncWorkOrdersAsync] start`)
    const items = await fetchModifiedWorkOrders(0);
    console.debug(`[syncWorkOrdersAsync] found ${items.length} items`)
    // override everything
  }
);

export const syncSlice = createSlice({
  name: "sync",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addLog(state, action) {
      state.logs.push(action.payload);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(syncWorkOrdersAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(syncWorkOrdersAsync.fulfilled, (state, action) => {
        state.status = "idle";
      })
      .addCase(syncWorkOrdersAsync.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error;
      });
  },
});

export const selectLogs = (state: RootState) => state.sync.logs;


export default syncSlice.reducer;
